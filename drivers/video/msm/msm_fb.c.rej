--- len/msm/msm_fb.c	2014-12-19 10:01:02.000000000 +0000
+++ video/msm/msm_fb.c	2014-07-26 16:43:46.000000000 +0000
@@ -49,6 +49,12 @@
 #include "mdp.h"
 #include "mdp4.h"
 
+#if defined(CONFIG_FB_MSM_MIPI_HX8357_CMD_SMD_HVGA_PT_PANEL)
+#include "lcdc_backlight_ic.h"
+extern int read_recovery;
+#endif
+
+extern int charging_boot;
 #ifdef CONFIG_FB_MSM_TRIPLE_BUFFER
 #define MSM_FB_NUM	3
 #endif
@@ -56,7 +62,13 @@
 static unsigned char *fbram;
 static unsigned char *fbram_phys;
 static int fbram_size;
+static bool align_buffer = true;
 static boolean bf_supported;
+/* Set backlight on resume after 50 ms after first
+ * pan display on the panel. This is to avoid panel specific
+ * transients during resume.
+ */
+unsigned long backlight_duration = (HZ/20);
 
 static struct platform_device *pdev_list[MSM_FB_MAX_DEV_LIST];
 static int pdev_list_cnt;
@@ -91,8 +103,6 @@
 extern int32 mdp_block_power_cnt[MDP_MAX_BLOCK];
 extern unsigned long mdp_timer_duration;
 
-extern void lm3528_set_keyboardbl(int key_blan);
-
 static int msm_fb_register(struct msm_fb_data_type *mfd);
 static int msm_fb_open(struct fb_info *info, int user);
 static int msm_fb_release(struct fb_info *info, int user);
@@ -111,8 +121,7 @@
 static int msm_fb_mmap(struct fb_info *info, struct vm_area_struct * vma);
 static int mdp_bl_scale_config(struct msm_fb_data_type *mfd,
 						struct mdp_bl_scale_data *data);
-//static void msm_fb_scale_bl(__u32 *bl_lvl);
-void msm_fb_set_keyboardbacklight(__u32 key_blan);
+static void msm_fb_scale_bl(__u32 *bl_lvl);
 
 #ifdef MSM_FB_ENABLE_DBGFS
 
@@ -123,8 +132,6 @@
 struct dentry *msm_fb_debugfs_root;
 struct dentry *msm_fb_debugfs_file[MSM_FB_MAX_DBGFS];
 static int bl_scale, bl_min_lvl;
-bool disable_brightness = false;
-int key_blan_state = 1;
 
 DEFINE_MUTEX(msm_fb_notify_update_sem);
 void msmfb_no_update_notify_timer_cb(unsigned long data)
@@ -173,15 +180,22 @@
 					enum led_brightness value)
 {
 	struct msm_fb_data_type *mfd = dev_get_drvdata(led_cdev->dev->parent);
-	int bl_lvl;
+	u32 bl_lvl;
 
+	if (value < 0)
+		value = 0;
 	if (value > MAX_BACKLIGHT_BRIGHTNESS)
 		value = MAX_BACKLIGHT_BRIGHTNESS;
 
 	/* This maps android backlight level 0 to 255 into
 	   driver backlight level 0 to bl_max with rounding */
-       bl_lvl = value;
-       msm_fb_set_backlight(mfd, bl_lvl);
+	bl_lvl = (2 * value * mfd->panel_info.bl_max + MAX_BACKLIGHT_BRIGHTNESS)
+		/(2 * MAX_BACKLIGHT_BRIGHTNESS);
+
+	if (!bl_lvl && value)
+		bl_lvl = 1;
+
+	msm_fb_set_backlight(mfd, bl_lvl);
 }
 
 static struct led_classdev backlight_led = {
@@ -250,6 +264,39 @@
 	return ret;
 }
 
+#ifdef CONFIG_APPLY_GA_SOLUTION
+/* Mark for GetLog */
+struct struct_frame_buf_mark {
+	u32 special_mark_1;
+	u32 special_mark_2;
+	u32 special_mark_3;
+	u32 special_mark_4;
+	void *p_fb;
+	u32 resX;
+	u32 resY;
+	u32 bpp;    //color depth : 16 or 24
+	u32 frames; // frame buffer count : 2
+};
+
+static struct struct_frame_buf_mark  frame_buf_mark = {
+	.special_mark_1 = (('*' << 24) | ('^' << 16) | ('^' << 8) | ('*' << 0)),
+	.special_mark_2 = (('I' << 24) | ('n' << 16) | ('f' << 8) | ('o' << 0)),
+	.special_mark_3 = (('H' << 24) | ('e' << 16) | ('r' << 8) | ('e' << 0)),
+	.special_mark_4 = (('f' << 24) | ('b' << 16) | ('u' << 8) | ('f' << 0)),
+	.p_fb   = 0,
+#if 	1
+	.resX	= 256,
+	.resY	= 320,
+	.bpp	= 18,
+#else
+	.resX   = 320,
+	.resY   = 480,
+	.bpp    = 24,
+#endif
+	.frames = 2
+};
+#endif
+
 static ssize_t msm_fb_msm_fb_type(struct device *dev,
 				  struct device_attribute *attr, char *buf)
 {
@@ -330,6 +377,8 @@
 	sysfs_remove_group(&mfd->fbi->dev->kobj, &msm_fb_attr_group);
 }
 
+static void bl_workqueue_handler(struct work_struct *work);
+
 static int msm_fb_probe(struct platform_device *pdev)
 {
 	struct msm_fb_data_type *mfd;
@@ -366,8 +415,15 @@
 	if (!msm_fb_resource_initialized)
 		return -EPERM;
 
+#ifdef CONFIG_APPLY_GA_SOLUTION
+	/* Mark for GetLog */
+	frame_buf_mark.p_fb = fbram_phys;
+#endif
+
 	mfd = (struct msm_fb_data_type *)platform_get_drvdata(pdev);
 
+	INIT_DELAYED_WORK(&mfd->backlight_worker, bl_workqueue_handler);
+
 	if (!mfd)
 		return -ENODEV;
 
@@ -379,7 +435,7 @@
 
 	vsync_cntrl.dev = mfd->fbi->dev;
 	mfd->panel_info.frame_count = 0;
-	mfd->bl_level = 0;
+	mfd->bl_level = 255;
 	bl_scale = 1024;
 	bl_min_lvl = 255;
 #ifdef CONFIG_FB_MSM_OVERLAY
@@ -725,8 +781,13 @@
 		   .pm = &msm_fb_dev_pm_ops,
 		   },
 };
-#if 0 //disable flush FB when suspend, if using HDMI, enable this
-#if defined(CONFIG_HAS_EARLYSUSPEND) && defined(CONFIG_FB_MSM_MDP303)
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#ifdef CONFIG_FB_MSM_MIPI_DSI_WHITESCREEN
+boolean wakeupflag = TRUE ; 
+#endif
+
+#if defined(CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL) || defined(CONFIG_MACH_NEVIS3G_REV03)
 static void memset32_io(u32 __iomem *_ptr, u32 val, size_t count)
 {
 	count >>= 2;
@@ -734,36 +795,45 @@
 		writel(val, _ptr++);
 }
 #endif
-#endif
-#ifdef CONFIG_HAS_EARLYSUSPEND
+
 static void msmfb_early_suspend(struct early_suspend *h)
 {
+#ifdef CONFIG_FB_MSM_MIPI_DSI_WHITESCREEN
+	unsigned int waitcount = 5;
+	unsigned int sleepflag = 0;
+#endif
 	struct msm_fb_data_type *mfd = container_of(h, struct msm_fb_data_type,
 						early_suspend);
 	struct msm_fb_panel_data *pdata = NULL;
-#if 0 //disable flush FB when suspend, if using HDMI, enable this
-#if defined(CONFIG_FB_MSM_MDP303)
-	/*
-	* For MDP with overlay, set framebuffer with black pixels
-	* to show black screen on HDMI.
-	*/
+
+#if defined(CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL) || defined(CONFIG_MACH_NEVIS3G_REV03)
 	struct fb_info *fbi = mfd->fbi;
-	switch (mfd->fbi->var.bits_per_pixel) {
-	case 32:
-		memset32_io((void *)fbi->screen_base, 0xFF000000,
-							fbi->fix.smem_len);
-		break;
-	default:
-		memset32_io((void *)fbi->screen_base, 0x00, fbi->fix.smem_len);
-		break;
+#endif	
+
+#ifdef CONFIG_FB_MSM_MIPI_DSI_WHITESCREEN
+	while(waitcount){
+		if (!mfd->bl_level){
+			sleepflag = 1;
+			break;
+		}
+		msleep(20);
+		waitcount--;
 	}
+	if(sleepflag){
+		msm_fb_suspend_sub(mfd);
+		wakeupflag = TRUE;
+	}
+	else {
+		wakeupflag = FALSE;
+	}
+#else
+	msm_fb_suspend_sub(mfd);
 #endif
-#endif
-	msm_fb_set_backlight(mfd, 0);//to prevent show dirty screen
-	lm3528_set_keyboardbl(0);
-	disable_brightness = true;//to prevent set brightness
 
-	msm_fb_suspend_sub(mfd);
+#if defined(CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL) || defined(CONFIG_MACH_NEVIS3G_REV03)
+//Sometimes, The screen is seen previous image for a moment
+	memset32_io((void *)fbi->screen_base, 0xFF000000, fbi->fix.smem_len);
+#endif
 
 	pdata = (struct msm_fb_panel_data *)mfd->pdev->dev.platform_data;
 	if (hdmi_prim_display &&
@@ -795,30 +865,38 @@
 		}
 	}
 
+#ifdef CONFIG_FB_MSM_MIPI_DSI_WHITESCREEN
+	if(wakeupflag)
+#endif
 	msm_fb_resume_sub(mfd);
-	disable_brightness = false; //to resume setting brightness
 }
 #endif
 
 static int unset_bl_level, bl_updated;
 static int bl_level_old;
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+static u16 screen_unblanked = 0;
+static u16 panel_initializing = 0;
+#endif
+
 static int mdp_bl_scale_config(struct msm_fb_data_type *mfd,
 						struct mdp_bl_scale_data *data)
 {
 	int ret = 0;
-	int curr_bl = mfd->bl_level;
+	u32 curr_bl = mfd->bl_level;
 	bl_scale = data->scale;
 	bl_min_lvl = data->min_lvl;
 	pr_debug("%s: update scale = %d, min_lvl = %d\n", __func__, bl_scale,
 								bl_min_lvl);
 
 	/* update current backlight to use new scaling*/
+#ifdef CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL
 	msm_fb_set_backlight(mfd, curr_bl);
+#endif
 
 	return ret;
 }
 
-#if 0
 static void msm_fb_scale_bl(__u32 *bl_lvl)
 {
 	__u32 temp = *bl_lvl;
@@ -833,54 +911,53 @@
 
 	(*bl_lvl) = temp;
 }
-#endif
+
 void msm_fb_set_backlight(struct msm_fb_data_type *mfd, __u32 bkl_lvl)
 {
 	struct msm_fb_panel_data *pdata;
+	__u32 temp = bkl_lvl;
 
-	/*remove the bl_updated for the backlight in recovery can't light up*/
-	//printk("susan msm_fb_set_backlight start bl_updated = %d disable_brightness=%d\n",bl_updated,disable_brightness);
-	//if (!mfd->panel_power_on ) {
-	if (!mfd->panel_power_on || !bl_updated ||disable_brightness) {
+#ifdef CONFIG_MACH_ROY     
+//// for debugging backlight temporalily. so later should be removed.
+	printk("[BL] bkl_lvl : %d ,panel_power_on: %d, bl_updated : %d\n",bkl_lvl,mfd->panel_power_on,bl_updated);
+#endif
+
+#if !defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) && !defined(CONFIG_MACH_KYLEPLUS_OPEN) && !defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	if (!mfd->panel_power_on || !bl_updated) {
+		mfd->bl_level = bkl_lvl;
 		unset_bl_level = bkl_lvl;
 		return;
 	} else {
 		unset_bl_level = 0;
 	}
+#endif
 
+#ifdef CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL
+	msm_fb_scale_bl(&temp);
+#endif
 	pdata = (struct msm_fb_panel_data *)mfd->pdev->dev.platform_data;
 
 	if ((pdata) && (pdata->set_backlight)) {
 		down(&mfd->sem);
-		if (bl_level_old == bkl_lvl) {
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+		if (panel_initializing) {
+			mfd->bl_level = 0;
+		} else {
+			mfd->bl_level = bkl_lvl;
+		}
+#else		
+		if (bl_level_old == temp) {
 			up(&mfd->sem);
 			return;
 		}
-		mfd->bl_level = bkl_lvl;
+		mfd->bl_level = temp;
+#endif
 		pdata->set_backlight(mfd);
-		bl_level_old = mfd->bl_level;
+		mfd->bl_level = bkl_lvl;
+		bl_level_old = temp;
 		up(&mfd->sem);
 	}
 }
- 
-static int unset_key_blan = -1;
-static int keybl_updated;
-void msm_fb_set_keyboardbacklight(__u32 key_blan)
-{
-    printk("%s: keyboard backlight set = %d keybl_updated = %d disable_brightness = %d\n",__func__,key_blan,keybl_updated,disable_brightness);
-	key_blan_state = key_blan;
-	if (key_blan > 1)
-		key_blan = 1;
-
-	if (!keybl_updated ||disable_brightness) {
-		unset_key_blan = key_blan;
-		return;
-	} else {
-		unset_key_blan = -1;
-	}
-
-	lm3528_set_keyboardbl(key_blan);
-}
 
 static int msm_fb_blank_sub(int blank_mode, struct fb_info *info,
 			    boolean op_enable)
@@ -901,8 +978,25 @@
 	switch (blank_mode) {
 	case FB_BLANK_UNBLANK:
 		if (!mfd->panel_power_on) {
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC)  || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+			down(&mfd->sem);
+			panel_initializing = 1;
+			pdata->set_backlight(mfd);
+			up(&mfd->sem);	
+			
+			ret = pdata->on(mfd->pdev);
+			// NOTICE:
+			// it should delay here to avoid flash caused by display_on command
+			// please set it in the pdata->on() according to your LCD
+
+			down(&mfd->sem);
+			panel_initializing = 0;
+			pdata->set_backlight(mfd);
+			up(&mfd->sem);		
+#else
 			msleep(16);
 			ret = pdata->on(mfd->pdev);
+#endif
 			if (ret == 0) {
 				mfd->panel_power_on = TRUE;
 
@@ -931,13 +1025,18 @@
 			mfd->op_enable = FALSE;
 			curr_pwr_state = mfd->panel_power_on;
 			mfd->panel_power_on = FALSE;
+			cancel_delayed_work_sync(&mfd->backlight_worker);
 			bl_updated = 0;
 
+			// let screen light off smoothly, because backlight is turning off in another thread now
+			// if need delay more, please set it in the pdata->off()
 			msleep(16);
 			ret = pdata->off(mfd->pdev);
 			if (ret)
 				mfd->panel_power_on = curr_pwr_state;
-
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+			screen_unblanked = 0;
+#endif
 			mfd->op_enable = TRUE;
 		}
 		break;
@@ -951,6 +1050,11 @@
 	struct msm_panel_info *panel_info = &mfd->panel_info;
 	int remainder, yres, offset;
 
+        if (!align_buffer)
+        {
+        return fbi->var.xoffset * bpp + fbi->var.yoffset * fbi->fix.line_length;
+        }
+
 	if (panel_info->mode2_yres != 0) {
 		yres = panel_info->mode2_yres;
 		remainder = (fbi->fix.line_length*yres) & (PAGE_SIZE - 1);
@@ -1332,6 +1436,10 @@
 
 	var->xres = panel_info->xres;
 	var->yres = panel_info->yres;
+#if defined(CONFIG_MACH_ARUBASLIM_OPEN)
+	var->height = panel_info->height;/* height of picture in mm */
+	var->width  = panel_info->width;/* width of picture in mm */
+#endif
 	var->xres_virtual = panel_info->xres;
 	var->yres_virtual = panel_info->yres * mfd->fb_page +
 		((PAGE_SIZE - remainder)/fix->line_length) * mfd->fb_page;
@@ -1496,9 +1604,14 @@
 	     mfd->index, fbi->var.xres, fbi->var.yres, fbi->fix.smem_len);
 
 #ifdef CONFIG_FB_MSM_LOGO
+#if defined(CONFIG_MACH_NEVIS3G_REV03) || defined(CONFIG_MACH_ROY) || !defined (CONFIG_FB_MSM_MIPI_NT35510_CMD_WVGA_PT_PANEL)// because of strange bottom image display when booting
+#ifndef CONFIG_FB_MSM_MIPI_HX8369B_WVGA_PT_PANEL
 	/* Flip buffer */
-	if (!load_565rle_image(INIT_IMAGE_FILE, bf_supported))
-		;
+	if (charging_boot != 1)	
+		if (!load_565rle_image(INIT_IMAGE_FILE, bf_supported))
+			;
+#endif
+#endif
 #endif
 	ret = 0;
 
@@ -1703,15 +1816,29 @@
 
 DEFINE_SEMAPHORE(msm_fb_pan_sem);
 
+static void bl_workqueue_handler(struct work_struct *work)
+{
+	struct msm_fb_data_type *mfd = container_of(to_delayed_work(work),
+				struct msm_fb_data_type, backlight_worker);
+	struct msm_fb_panel_data *pdata = mfd->pdev->dev.platform_data;
+
+	if ((pdata) && (pdata->set_backlight) && (!bl_updated)) {
+		down(&mfd->sem);
+		mfd->bl_level = unset_bl_level;
+		pdata->set_backlight(mfd);
+		bl_level_old = unset_bl_level;
+		bl_updated = 1;
+		up(&mfd->sem);
+	}
+}
+
 static int msm_fb_pan_display(struct fb_var_screeninfo *var,
 			      struct fb_info *info)
 {
 	struct mdp_dirty_region dirty;
 	struct mdp_dirty_region *dirtyPtr = NULL;
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
-	struct msm_fb_panel_data *pdata;
 
-	static int flags = 0;
 	/*
 	 * If framebuffer is 2, io pen display is not allowed.
 	 */
@@ -1792,38 +1919,28 @@
 	}
 
 	mdp_set_dma_pan_info(info, dirtyPtr,
-	     (var->activate == FB_ACTIVATE_VBL));
-         /*fix reboot black lcd after factory reset by wangwang */
-	if (flags) {
-		mdp_dma_pan_update(info);
-	}
-	else {
-		flags = 1;
-	}
-
+			     (var->activate == FB_ACTIVATE_VBL));
+	mdp_dma_pan_update(info);
 	up(&msm_fb_pan_sem);
-
-	if(unset_key_blan != -1 && !keybl_updated){
-		lm3528_set_keyboardbl(unset_key_blan);
-		unset_key_blan = -1;
-		keybl_updated = 1;
-	}
-
-	if (unset_bl_level && !bl_updated) {
-		pdata = (struct msm_fb_panel_data *)mfd->pdev->
-			dev.platform_data;
-		if ((pdata) && (pdata->set_backlight)) {
-                          msleep(30);
-			down(&mfd->sem);
-			mfd->bl_level = unset_bl_level;
-			pdata->set_backlight(mfd);
-			lm3528_set_keyboardbl(key_blan_state);
-			bl_level_old = unset_bl_level;
-			up(&mfd->sem);
-			bl_updated = 1;
+	
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	if (mfd->panel_power_on && !screen_unblanked) {
+		pdata = (struct msm_fb_panel_data *)mfd->pdev->dev.platform_data;
+		if ((pdata) && (pdata->unblank)) {
+			pdata->unblank(mfd->pdev);
+			screen_unblanked = 1;
 		}
 	}
 
+#else
+#if defined(CONFIG_FB_MSM_MIPI_HX8357_CMD_SMD_HVGA_PT_PANEL)
+	if (unset_bl_level && !bl_updated && mfd->panel_power_on) 
+#else
+	if (unset_bl_level && !bl_updated)
+#endif
+		schedule_delayed_work(&mfd->backlight_worker,
+				backlight_duration);
+#endif
 	++mfd->panel_info.frame_count;
 	return 0;
 }
@@ -2012,6 +2129,14 @@
 		msm_fb_blank_sub(FB_BLANK_UNBLANK, info, mfd->op_enable);
 	}
 
+#if defined(CONFIG_FB_MSM_MIPI_HX8357_CMD_SMD_HVGA_PT_PANEL)
+	if( read_recovery > 0 )
+	{
+		msleep(25);
+		backlight_ic_set_brightness(160);
+	}
+#endif
+
 	return 0;
 }
 
@@ -2963,7 +3088,6 @@
 	int	ret;
 	struct msmfb_overlay_data req;
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
-	struct msm_fb_panel_data *pdata;
 
 	if (mfd->overlay_play_enable == 0)	/* nothing to do */
 		return 0;
@@ -2994,19 +3118,21 @@
 
 	ret = mdp4_overlay_play(info, &req);
 
-	if (unset_bl_level && !bl_updated) {
-		pdata = (struct msm_fb_panel_data *)mfd->pdev->
-			dev.platform_data;
-		if ((pdata) && (pdata->set_backlight)) {
-			down(&mfd->sem);
-			mfd->bl_level = unset_bl_level;
-			pdata->set_backlight(mfd);
-			bl_level_old = unset_bl_level;
-			up(&mfd->sem);
-			bl_updated = 1;
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	if (mfd->panel_power_on && !screen_unblanked) {
+		pdata = (struct msm_fb_panel_data *)mfd->pdev->dev.platform_data;
+		if ((pdata) && (pdata->unblank)) {
+			pdata->unblank(mfd->pdev);
+			screen_unblanked = 1;
 		}
 	}
 
+#else
+	if (unset_bl_level && !bl_updated)
+		schedule_delayed_work(&mfd->backlight_worker,
+				backlight_duration);
+#endif
+
 	return ret;
 }
 
@@ -3794,6 +3920,41 @@
 }
 EXPORT_SYMBOL(msm_fb_add_device);
 
+#ifdef CONFIG_SEC_DEBUG_SUBSYS
+int get_fbinfo(int fb_num, unsigned int *fb_paddr, unsigned int *xres,
+		unsigned int *yres, unsigned int *bpp,
+		unsigned char *roff, unsigned char *rlen,
+		unsigned char *goff, unsigned char *glen,
+		unsigned char *boff, unsigned char *blen,
+		unsigned char *aoff, unsigned char *alen)
+{
+	struct fb_info *info;
+
+	if (fb_num >= MAX_FBI_LIST)
+		return -ENODEV;
+
+	info = fbi_list[fb_num];
+	if (!info)
+		return -ENODEV;
+
+	*fb_paddr = (unsigned int)info->fix.smem_start;
+	*xres = ALIGN(info->var.xres, 32);
+	*yres = info->var.yres;
+	*bpp = info->var.bits_per_pixel;
+	*roff = info->var.red.offset;
+	*rlen = info->var.red.length;
+	*goff = info->var.green.offset;
+	*glen = info->var.green.length;
+	*boff = info->var.blue.offset;
+	*blen = info->var.blue.length;
+	*aoff = info->var.transp.offset;
+	*alen = info->var.transp.length;
+
+	return 0;
+}
+#endif
+
+
 int get_fb_phys_info(unsigned long *start, unsigned long *len, int fb_num,
 	int subsys_id)
 {
@@ -3913,5 +4074,6 @@
 #endif
 }
 EXPORT_SYMBOL(msm_fb_v4l2_update);
+module_param(align_buffer, bool, 0644);
 
 module_init(msm_fb_init);
